{"remainingRequest":"C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\src\\components\\Barchart.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\src\\components\\Barchart.vue","mtime":1606440587994},{"path":"C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\huawe\\Desktop\\Safety-Application-CS542\\dashboard\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBHQ2hhcnQgfSBmcm9tICJ2dWUtZ29vZ2xlLWNoYXJ0cyI7DQppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOw0KdmFyIHdlYmNhbGwgPSBheGlvcy5jcmVhdGUoew0KICBiYXNlVVJMOiAiaHR0cDovLzEyNy4wLjAuMTo1MDAwLyIsDQogIHRpbWVvdXQ6IDIwMDAwLA0KICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLA0KICBoZWFkZXJzOiB7ICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIgfSwNCn0pOw0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAiQXBwIiwNCiAgY29tcG9uZW50czogew0KICAgIEdDaGFydCwNCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgY2hhcnRzTGliOiBudWxsLA0KICAgICAgLy8gQXJyYXkgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHByb2Nlc3NlZCB3aXRoIHZpc3VhbGl6YXRpb24uYXJyYXlUb0RhdGFUYWJsZSBmdW5jdGlvbg0KICAgICAgY2hhcnREYXRhOiBbXSwNCiAgICAgIC8vc2V0dGluZzoge3BhY2thZ2VzOlsiY29yZWNoYXJ0Il19DQogICAgfTsNCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICBjaGFydE9wdGlvbnMoKSB7DQogICAgICBpZiAoIXRoaXMuY2hhcnRzTGliKSByZXR1cm4gbnVsbDsNCiAgICAgIHJldHVybiB0aGlzLmNoYXJ0c0xpYi5jaGFydHMuQmFyLmNvbnZlcnRPcHRpb25zKHsNCiAgICAgICAgYmFyczogImhvcml6b250YWwiLCAvLyBSZXF1aXJlZCBmb3IgTWF0ZXJpYWwgQmFyIENoYXJ0cy4NCiAgICAgICAgaEF4aXM6IHsNCiAgICAgICAgICB0aXRsZTogIkNvdW50IiwNCiAgICAgICAgICBtaW54VmFsdWU6IDExMiwNCiAgICAgICAgICBncmlkbGluZXM6IHsgY291bnQ6IDEwIH0sDQogICAgICAgICAgZm9ybWF0OiAiZGVjaW1hbCIsDQogICAgICAgICAgZGlyZWN0aW9uOiAtMSwNCiAgICAgICAgICAvLyBiYXNlbGluZUNvbG9yOiAncmVkJywNCiAgICAgICAgICAvLyB0ZXh0U3R5bGU6IHtjb2xvcjogJ3BpbmsnfSwNCiAgICAgICAgICAvLyB0aWNrczogWzUwMCwxMDAwLDE1MDAsMjAwMCxdDQogICAgICAgICAgLy8gYmFzZWxpbmVDb2xvcjogJ3JlZCcNCiAgICAgICAgfSwNCiAgICAgICAgdkF4aXM6IHsNCiAgICAgICAgICB0aXRsZTogIldlYXRoZXIgVHlwZSIsDQogICAgICAgICAgYmFzZWxpbmVDb2xvcjogInJlZCIsDQogICAgICAgICAgbWluVmFsdWU6IDExMiwNCiAgICAgICAgICBkaXJlY3Rpb246IC0xLA0KICAgICAgICAgIC8vIHRpY2tzOiBbNTAwLDEwMDAsMTUwMCwyMDAwLF0NCiAgICAgICAgICAvLyBncmlkbGluZXM6IHsgY291bnQ6IDEwIH0NCiAgICAgICAgfSwNCiAgICAgICAgaGVpZ2h0OiAzMDAsDQogICAgICAgIGJhcjogeyBncm91cFdpZHRoOiAiNzUlIiB9LA0KICAgICAgICBjb2xvcnM6IFsiIzc1NzBiMyJdLA0KICAgICAgICBsZWdlbmQ6IHsgcG9zaXRpb246ICJub25lIiB9LA0KICAgICAgICAvLyBiYWNrZ3JvdW5kQ29sb3I6ICdyZWQnDQogICAgICAgIC8vIGlzU3RhY2tlZDogdHJ1ZQ0KICAgICAgfSk7DQogICAgfSwNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIG9uQ2hhcnRSZWFkeShjaGFydCwgZ29vZ2xlKSB7DQogICAgICB0aGlzLmNoYXJ0c0xpYiA9IGdvb2dsZTsNCiAgICB9LA0KICAgIGNyZWF0ZUdyYXBoKCkgew0KICAgICAgdmFyIHZtID0gdGhpczsNCiAgICAgIHZhciB1cmwgPSAiL3dlYXRoZXJjbnQiOw0KICAgICAgdHJ5IHsNCiAgICAgICAgd2ViY2FsbC5nZXQodXJsKS50aGVuKGFzeW5jIGZ1bmN0aW9uIChyZXNwb25zZSkgew0KICAgICAgICAgIHZhciB0ZW1wID0gYXdhaXQgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7DQogICAgICAgICAgdmFyIHJlc3VsdCA9IFtbInRleHQiLCAidmFsdWUiXV07DQogICAgICAgICAgZm9yICh2YXIgaSBvZiB0ZW1wKSB7DQogICAgICAgICAgICB2YXIgY3VyID0gW107DQogICAgICAgICAgICBjdXIucHVzaChpWyJ0ZXh0Il0pOw0KICAgICAgICAgICAgY3VyLnB1c2gocGFyc2VJbnQoaVsidmFsdWUiXSkpOw0KICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VyKTsNCiAgICAgICAgICB9DQogICAgICAgICAgdm0uY2hhcnREYXRhID0gcmVzdWx0LnNsaWNlKDAsIDExKTsNCiAgICAgICAgfSk7DQogICAgICB9IGNhdGNoIChlcnIpIHsNCiAgICAgICAgY29uc29sZS5sb2coImVycm9yIik7DQogICAgICAgIGFsZXJ0KGVycik7DQogICAgICB9DQogICAgfSwNCiAgfSwNCiAgbW91bnRlZCgpIHsNCiAgICB0aGlzLmNyZWF0ZUdyYXBoKCk7DQogIH0sDQp9Ow0K"},{"version":3,"sources":["Barchart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Barchart.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div id=\"app\" class=\"mt-3\">\r\n    <h5 class=\"text-center\">Weather Frequency</h5>\r\n    <br />\r\n    <GChart\r\n      :settings=\"{ packages: ['bar'] }\"\r\n      :data=\"chartData\"\r\n      :options=\"chartOptions\"\r\n      :createChart=\"(el, google) => new google.charts.Bar(el)\"\r\n      @ready=\"onChartReady\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { GChart } from \"vue-google-charts\";\r\nimport axios from \"axios\";\r\nvar webcall = axios.create({\r\n  baseURL: \"http://127.0.0.1:5000/\",\r\n  timeout: 20000,\r\n  withCredentials: false,\r\n  headers: { \"Content-Type\": \"application/json\" },\r\n});\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    GChart,\r\n  },\r\n  data() {\r\n    return {\r\n      chartsLib: null,\r\n      // Array will be automatically processed with visualization.arrayToDataTable function\r\n      chartData: [],\r\n      //setting: {packages:[\"corechart\"]}\r\n    };\r\n  },\r\n  computed: {\r\n    chartOptions() {\r\n      if (!this.chartsLib) return null;\r\n      return this.chartsLib.charts.Bar.convertOptions({\r\n        bars: \"horizontal\", // Required for Material Bar Charts.\r\n        hAxis: {\r\n          title: \"Count\",\r\n          minxValue: 112,\r\n          gridlines: { count: 10 },\r\n          format: \"decimal\",\r\n          direction: -1,\r\n          // baselineColor: 'red',\r\n          // textStyle: {color: 'pink'},\r\n          // ticks: [500,1000,1500,2000,]\r\n          // baselineColor: 'red'\r\n        },\r\n        vAxis: {\r\n          title: \"Weather Type\",\r\n          baselineColor: \"red\",\r\n          minValue: 112,\r\n          direction: -1,\r\n          // ticks: [500,1000,1500,2000,]\r\n          // gridlines: { count: 10 }\r\n        },\r\n        height: 300,\r\n        bar: { groupWidth: \"75%\" },\r\n        colors: [\"#7570b3\"],\r\n        legend: { position: \"none\" },\r\n        // backgroundColor: 'red'\r\n        // isStacked: true\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    onChartReady(chart, google) {\r\n      this.chartsLib = google;\r\n    },\r\n    createGraph() {\r\n      var vm = this;\r\n      var url = \"/weathercnt\";\r\n      try {\r\n        webcall.get(url).then(async function (response) {\r\n          var temp = await JSON.parse(JSON.stringify(response.data));\r\n          var result = [[\"text\", \"value\"]];\r\n          for (var i of temp) {\r\n            var cur = [];\r\n            cur.push(i[\"text\"]);\r\n            cur.push(parseInt(i[\"value\"]));\r\n            result.push(cur);\r\n          }\r\n          vm.chartData = result.slice(0, 11);\r\n        });\r\n      } catch (err) {\r\n        console.log(\"error\");\r\n        alert(err);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.createGraph();\r\n  },\r\n};\r\n</script>"]}]}